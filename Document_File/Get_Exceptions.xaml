<Activity mc:Ignorable="sap sap2010 sads" x:Class="Get_Exceptions"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 	
xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 	
xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 	
xmlns:s="clr-namespace:System;assembly=mscorlib"
 	
xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 	
xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 	
xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 	
xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 	
xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 	
xmlns:sd="clr-namespace:System.Data;assembly=System.Data"
 	
xmlns:ui="http://schemas.uipath.com/workflow/activities"
 	
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_line" Type="InArgument(x:String)" />
    <x:Property Name="io_workflowRow" Type="InOutArgument(sd:DataRow)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>Get_Exceptions_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Data.Entity</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Takes the full text of a XAML file and creates a list of exceptions from that text." DisplayName="Private: Get_Exceptions" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="intExceptionStart" />
      <Variable x:TypeArguments="x:Int32" Name="intExceptionStop" />
      <Variable x:TypeArguments="x:String" Name="strException" />
      <Variable x:TypeArguments="s:String[]" Name="arrExceptions" />
      <Variable x:TypeArguments="x:Int32" Name="intRow" />
    </Sequence.Variables>
    <ui:LogMessage DisplayName="Log start" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="Get_Exceptions started." />
    <Sequence DisplayName="Standard Exceptions" sap2010:WorkflowViewState.IdRef="Sequence_4">
      <Sequence.Variables>
        <Variable x:TypeArguments="x:String" Name="TROUBLESHOOTING_line" />
        <Variable x:TypeArguments="sd:DataRow" Name="TROUBLESHOOTING_row" />
      </Sequence.Variables>
      <Assign DisplayName="TROUBLESHOOTING_line" sap2010:WorkflowViewState.IdRef="Assign_31">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[TROUBLESHOOTING_line]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[in_line]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign DisplayName="TROUBLESHOOTING_row" sap2010:WorkflowViewState.IdRef="Assign_32">
        <Assign.To>
          <OutArgument x:TypeArguments="sd:DataRow">[TROUBLESHOOTING_row]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="sd:DataRow">[io_workflowRow]</InArgument>
        </Assign.Value>
      </Assign>
      <If Condition="[len(io_workflowRow(&quot;Exceptions&quot;).ToString) = 0]" DisplayName="Add exception header" sap2010:WorkflowViewState.IdRef="If_12">
        <If.Then>
          <Assign DisplayName="Add header" sap2010:WorkflowViewState.IdRef="Assign_29">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Object">[io_workflowRow("Exceptions")]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Object">["Exceptions" + vbNewLine]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
      <Assign DisplayName="Determine starting point of exceptions" sap2010:WorkflowViewState.IdRef="Assign_18">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[intExceptionStart]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">[Instr(lcase(in_line), "exception=""[new exception(&amp;quot;") + 32]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign DisplayName="Determine stopping point of exceptions" sap2010:WorkflowViewState.IdRef="Assign_17">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[intExceptionStop]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">[Instr(lcase(in_line), "&amp;quot;)]"" sap2010")]</InArgument>
        </Assign.Value>
      </Assign>
      <If Condition="[intExceptionStart &gt; 32 and intExceptionStop &gt; 32]" DisplayName="Get exception info" sap2010:WorkflowViewState.IdRef="If_6">
        <If.Then>
          <Sequence DisplayName="Get exception and update row" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <Assign DisplayName="Get exception" sap2010:WorkflowViewState.IdRef="Assign_15">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[strException]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">["'" + Trim(Mid(in_line, intExceptionstart, intExceptionStop - intExceptionStart)) + "'"]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Add each exception to output" sap2010:WorkflowViewState.IdRef="Assign_16">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Object">[io_workflowRow("Exceptions")]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[io_workflowRow("Exceptions").ToString + strException + vbNewLine]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Then>
      </If>
    </Sequence>
    <Sequence DisplayName="Business Rule Exceptions" sap2010:WorkflowViewState.IdRef="Sequence_6">
      <If Condition="[len(io_workflowRow(&quot;BR_Exceptions&quot;).ToString) = 0]" DisplayName="Add br exception header" sap2010:WorkflowViewState.IdRef="If_13">
        <If.Then>
          <Assign DisplayName="Add header" sap2010:WorkflowViewState.IdRef="Assign_30">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Object">[io_workflowRow("BR_Exceptions")]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Object">["Business Rule Exceptions" + vbNewLine]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
      <Assign DisplayName="Determine starting point of exceptions" sap2010:WorkflowViewState.IdRef="Assign_24">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[intExceptionStart]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">[Instr(lcase(in_line), "exception=""[new businessruleexception(&amp;quot;") + 44]</InArgument>
        </Assign.Value>
      </Assign>
      <Assign DisplayName="Determine stopping point of exceptions" sap2010:WorkflowViewState.IdRef="Assign_23">
        <Assign.To>
          <OutArgument x:TypeArguments="x:Int32">[intExceptionStop]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:Int32">[Instr(lcase(in_line), "&amp;quot;)]"" sap2010")]</InArgument>
        </Assign.Value>
      </Assign>
      <If Condition="[intExceptionStart &gt; 44 and intExceptionStop &gt; 44]" DisplayName="Get br exception" sap2010:WorkflowViewState.IdRef="If_7">
        <If.Then>
          <Sequence DisplayName="Gather and output exceptions" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <Assign DisplayName="Get list of exceptions" sap2010:WorkflowViewState.IdRef="Assign_21">
              <Assign.To>
                <OutArgument x:TypeArguments="x:String">[strException]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">["'" + Trim(Mid(in_line, intExceptionstart, intExceptionStop - intExceptionStart)) + "'"]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign DisplayName="Add each exception to output" sap2010:WorkflowViewState.IdRef="Assign_22">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Object">[io_workflowRow("BR_Exceptions")]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[io_workflowRow("BR_Exceptions").ToString + strException + vbNewLine]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Then>
      </If>
      <If Condition="[io_workflowRow(&quot;BR_Exceptions&quot;).ToString = (&quot;Business Rule Exceptions&quot; + vbNewLine)]" DisplayName="Update all br exceptions with n/a" sap2010:WorkflowViewState.IdRef="If_8">
        <If.Then>
          <Sequence sap2010:WorkflowViewState.IdRef="Sequence_7">
            <Assign DisplayName="Add header to Calls" sap2010:WorkflowViewState.IdRef="Assign_25">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Object">[io_workflowRow("BR_Exceptions")]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[io_workflowRow("BR_Exceptions").ToString + "n/a" + vbNewLine]</InArgument>
              </Assign.Value>
            </Assign>
          </Sequence>
        </If.Then>
      </If>
    </Sequence>
    <ui:LogMessage DisplayName="Log end" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="Get_Exceptions ended." />
    <sads:DebugSymbol.Symbol>d1ZDOlxVc2Vyc1x0ZGl4b25cU291cmNlXFJvYm90aWNQcm9jZXNzQXV0b21hdGlvblxlUmVmZXJyYWxzXERvY3Vib3RcR2V0X0V4Y2VwdGlvbnMueGFtbDtOA+MBDgIBAVYFVowBAgFIVwWeARACASSfAQXgARACAQThAQXhAYgBAgECVnBWiQECAUlcB2MQAgFDZAdrEAIBPmwHdwwCATl4B38QAgE1gAEHhwEQAgExiAEHnQEMAgEloAEHqwEMAgEfrAEHswEQAgEbtAEHuwEQAgEXvAEH0QEMAgEL0gEH3wEMAgEF4QFu4QGFAQIBA2EyYTsCAUZeM15JAgFEaTRpRAIBQWY1ZkoCAT9sFWxRAgE6bgt1FAIBO30xfXYCATh6MnpFAgE2hQExhQFiAgE0ggEyggFEAgEyiAEViAFPAgEmigELmwEWAgEpoAEVoAFUAgEgogELqQEUAgEhsQExsQGCAQIBHq4BMq4BRQIBHLkBMbkBYgIBGrYBMrYBRAIBGLwBFbwBTwIBDL4BC88BFgIBD9IBFdIBfgIBBtQBC90BFgIBB3M2c04CAT1wN3BVAgE8iwENkgEWAgEtkwENmgEWAgEqpwE2pwFcAgEjpAE3pAFYAgEivwENxgEWAgETxwENzgEWAgEQ1QEN3AEWAgEIkAE4kAGRAQIBMI0BOY0BRwIBLpgBOJgBeAIBLJUBOZUBVwIBK8QBOMQBkQECARbBATnBAUcCARTMATjMAXsCARLJATnJAVoCARHaATjaAXQCAQrXATnXAVoCAQk=</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="LogMessage_5" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_31" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_32" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_29" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_12" sap:VirtualizedContainerService.HintSize="242,51" />
      <sap2010:ViewStateData Id="Assign_18" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_17" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_15" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_16" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_6" sap:VirtualizedContainerService.HintSize="242,51" />
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_30" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_13" sap:VirtualizedContainerService.HintSize="242,51" />
      <sap2010:ViewStateData Id="Assign_24" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_23" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_21" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_22" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_5" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_7" sap:VirtualizedContainerService.HintSize="242,51" />
      <sap2010:ViewStateData Id="Assign_25" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_7" sap:VirtualizedContainerService.HintSize="264,275">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_8" sap:VirtualizedContainerService.HintSize="464,208" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_6" sap:VirtualizedContainerService.HintSize="200,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="222,505">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Get_Exceptions_1" sap:VirtualizedContainerService.HintSize="262,585">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="ShouldCollapseAll">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>